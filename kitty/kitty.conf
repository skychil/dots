# gruvbox-material dark colorscheme for kitty

foreground            #d4be98
background            #282828
selection_foreground  #d4be98
selection_background  #45403d
url_color             #e78a4e

cursor #a89984
cursor_text_color background

active_tab_background #282828
active_tab_foreground #d4be98
active_tab_font_style bold
inactive_tab_background #282828
inactive_tab_foreground #a89984
inactive_tab_font_style normal


# black
color0   #45403d
color8   #928374

# red
color1   #ea6962
color9   #ea6962

# green
color2   #a9b665
color10  #a9b665

# yellow
color3   #e78a4e
color11  #d8a657

# blue
color4   #7daea3
color12  #7daea3

# magenta
color5   #d3869b
color13  #d3869b

# cyan
color6   #89b482
color14  #89b482

# white
color7   #d4be98
color15  #ddc7a1



# Fonts

# kitty has very powerful font management. You can configure
# individual font faces and even specify special fonts for particular
# characters.

font_family      monospace
bold_font        auto
italic_font      auto
bold_italic_font auto

# You can specify different fonts for the bold/italic/bold-italic
# variants. To get a full list of supported fonts use the `kitty
# list-fonts` command. By default they are derived automatically, by
# the OSes font system. Setting them manually is useful for font
# families that have many weight variants like Book, Medium, Thick,
# etc. For example::

#     font_family      Operator Mono Book
#     bold_font        Operator Mono Medium
#     italic_font      Operator Mono Book Italic
#     bold_italic_font Operator Mono Medium Italic

font_size 14.0

# Font size (in pts)


cursor #cccccc
cursor_text_color #111111

# Choose the color of text under the cursor. If you want it rendered
# with the background color of the cell underneath instead, use the
# special keyword: background

cursor_blink_interval -1

# The interval (in seconds) at which to blink the cursor. Set to zero
# to disable blinking. Negative values mean use system default. Note
# that numbers smaller than repaint_delay will be limited to
# repaint_delay.

cursor_stop_blinking_after 15.0

# Stop blinking cursor after the specified number of seconds of
# keyboard inactivity.  Set to zero to never stop blinking.



touch_scroll_multiplier 1.0

# Modify the amount scrolled by a touchpad. Note this is only used
# for high precision scrolling devices on platforms such as macOS and
# Wayland. Use negative numbers to change scroll direction.

window_border_width 1.0

# The width (in pts) of window borders. Will be rounded to the
# nearest number of pixels based on screen resolution. Note that
# borders are displayed only when more than one window is visible.
# They are meant to separate multiple windows.

draw_minimal_borders yes

# Draw only the minimum borders needed. This means that only the
# minimum needed borders for inactive windows are drawn. That is only
# the borders that separate the inactive window from a neighbor. Note
# that setting a non-zero window margin overrides this and causes all
# borders to be drawn.

window_margin_width 0

# The window margin (in pts) (blank area outside the border). A
# single value sets all four sides. Two values set the vertical and
# horizontal sides. Three values set top, horizontal and bottom. Four
# values set top, right, bottom and left.

single_window_margin_width 0

# The window margin (in pts) to use when only a single window is
# visible. Negative values will cause the value of
# window_margin_width to be used instead. A single value sets all
# four sides. Two values set the vertical and horizontal sides. Three
# values set top, horizontal and bottom. Four values set top, right,
# bottom and left.

hide_window_decorations yes

# Hide the window decorations (title-bar and window borders) with yes
# Whether this works and exactly what effect it has depends on the
# window manager/operating system.


confirm_os_window_close 0

# Ask for confirmation when closing an OS window or a tab that has at
# least this number of kitty windows in it. A value of zero disables
# confirmation. This confirmation also applies to requests to quit
# the entire application (all OS windows, via the quit action).




copy_on_select clipboard

# Copy to clipboard or a private buffer on select. With this set to
# clipboard, simply selecting text with the mouse will cause the text
# to be copied to clipboard. You can instead
# specify a name such as a1 to copy to a private kitty buffer
# instead. Map a shortcut with the paste_from_buffer action to paste
# from this private buffer. For example::

#     map cmd+shift+v paste_from_buffer a1




clipboard_control write-clipboard write-primary

# Allow programs running in kitty to read and write from the
# clipboard. You can control exactly which actions are allowed. The
# set of possible actions is: write-clipboard read-clipboard write-
# primary read-primary. You can additionally specify no-append to
# disable kitty's protocol extension for clipboard concatenation. The
# default is to allow writing to the clipboard and primary selection
# with concatenation enabled. Note that enabling the read
# functionality is a security risk as it means that any program, even
# one running on a remote server via SSH can read your clipboard.


# # Keyboard shortcuts

# # For a list of key names, see: the GLFW key macros
# # <https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h#L349>.
# # The name to use is the part after the GLFW_KEY_ prefix. For a list
# # of modifier names, see: GLFW mods
# # <https://www.glfw.org/docs/latest/group__mods.html>

# # On Linux you can also use XKB key names to bind keys that are not
# # supported by GLFW. See XKB keys
# # <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
# # keysyms.h> for a list of key names. The name to use is the part
# # after the XKB_KEY_ prefix. Note that you can only use an XKB key
# # name for keys that are not known as GLFW keys.


# # You can use the special action no_op to unmap a keyboard shortcut
# # that is assigned in the default configuration::
# #     map kitty_mod+space no_op

# # You can combine multiple actions to be triggered by a single
# # shortcut, using the syntax below
# #     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# # For example
# #     map kitty_mod+e combine : new_window : next_layout

# # You can use multi-key shortcuts using the syntax shown below::
# #     map key1>key2>key3 action

# # For example::
# #     map ctrl+f>2 set_font_size 20

enable_audio_bell no

kitty_mod ctrl+alt

# clear_all_shortcuts no

# # You can have kitty remove all shortcut definition seen up to this
# # point. Useful, for instance, to remove the default shortcuts.

# # Clipboard

map kitty_mod+c  copy_to_clipboard
map kitty_mod+v  paste_from_clipboard
map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program

# # You can also pass the contents of the current selection to any
# # program using pass_selection_to_program. By default, the system's
# # open program is used, but you can specify your own, the selection
# # will be passed as a command line argument to the program, for
# # example::

# #     map kitty_mod+o pass_selection_to_program firefox

# # You can pass the current selection to a terminal program running in
# # a new kitty window, by using the @selection placeholder::

# #     map kitty_mod+y new_window less @selection


# # Scrolling

# map kitty_mod+up        scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback

# # You can pipe the contents of the current screen + history buffer as
# # STDIN to an arbitrary program using the ``launch`` function. For
# # example, the following opens the scrollback buffer in less in an
# # overlay window::

# #     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

# # For more details on piping screen and buffer contents to external
# # programs, see launch.



map ctrl+equal     change_font_size all +1.0
map ctrl+plus      change_font_size all +1.0
map ctrl+minus     change_font_size all -1.0
map ctrl+backspace change_font_size all 0

# # To setup shortcuts for specific font sizes::

# #     map kitty_mod+f6 change_font_size all 10.0

# # To setup shortcuts to change only the current OS window's font
# # size::

# #     map kitty_mod+f6 change_font_size current 10.0
# # }}}

# # kitten_alias hints hints --hints-offset=0

# # You can create aliases for kitten names, this allows overriding the
# # defaults for kitten options and can also be used to shorten
# # repeated mappings of the same kitten with a specific group of
# # options. For example, the above alias changes the default value of
# # kitty +kitten hints --hints-offset to zero for all mappings,
# # including the builtin ones.



# # Select and act on visible text

# # Use the hints kitten to select text and either pass it to an
# # external program or insert it into the terminal or copy it to the
# # clipboard.

# map kitty_mod+e kitten hints

# # Open a currently visible URL using the keyboard. The program used
# # to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

# # Select a path/filename and insert it into the terminal. Useful, for
# # instance to run git commands on a filename output from a previous
# # git command.

# map kitty_mod+p>shift+f kitten hints --type path

# # Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

# # Select a line of text and insert it into the terminal. Use for the
# # output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

# # Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

# # Select something that looks like a hash and insert it into the
# # terminal. Useful with git, which uses sha1 hashes to identify
# # commits

